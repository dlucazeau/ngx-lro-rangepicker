@import 'variables';

@mixin aa-grid-template($row-tpl, $col-tpl) {
    display: grid;
    grid-template-rows: #{$row-tpl};
    grid-template-columns: #{$col-tpl};

    display: -ms-grid;
    -ms-grid-rows: #{$row-tpl};
    -ms-grid-columns: #{$col-tpl};
}

@mixin aa-grid-row($row, $span: null) {
    @if $span {
        grid-row: $row / span $span;
        -ms-grid-row: $row;
        -ms-grid-row-span: $span;
    } @else {
        grid-row: $row;
        -ms-grid-row: $row;
    }
}
@mixin aa-grid-col($col, $span: null) {
    @if $span {
        grid-column: $col / span $span;
        -ms-grid-column: $col;
        -ms-grid-column-span: $span;
    } @else {
        grid-column: $col;
        -ms-grid-column: $col;
    }
}
// Sans span
@mixin aa-grid-row-col($row, $col) {
    grid-row: $row;
    -ms-grid-row: $row;
    grid-column: $col;
    -ms-grid-column: $col;
}
//box-shadow: 0 0 10px 0 rgba(0,87,255,0.2);
@mixin aa-btn-rounded-shadow {
    box-shadow: inset 0 0.5px 1.5px 0 rgba(0, 0, 0, 0.13);
}

@mixin aa-shadow01 {
    box-shadow: 0 2px 20px 4px rgba(0, 0, 0, 0.06);
    -moz-box-shadow: 0 2px 20px 4px rgba(0, 0, 0, 0.06);
    -webkit-box-shadow: 0 2px 20px 4px rgba(0, 0, 0, 0.06);
}

@mixin shadow02 {
    box-shadow: 0 5px 10px 4px rgba(0, 0, 0, 0.06);
    -moz-box-shadow: 0 5px 10px 4px rgba(0, 0, 0, 0.06);
    -webkit-box-shadow: 0 5px 10px 4px rgba(0, 0, 0, 0.06);
}

// Utilis√© dans les formulaires
@mixin shadow03 {
    box-shadow: 0 0 10px 0 rgba(0, 87, 255, 0.2);
    -moz-box-shadow: 0 0 10px 0 rgba(0, 87, 255, 0.2);
    -webkit-box-shadow: 0 0 10px 0 rgba(0, 87, 255, 0.2);
}
@mixin aa-btn-shadow01 {
    // color-primary-normal
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) &,
            .#{$name} & {
                // border-right: 1px solid rgba($color-border-normal, 0.8);
                box-shadow: 0
                    0
                    10px
                    0
                    rgba(getSkinColor($skin, color-primary-normal), 0.2);
            }
        }
    }
}
// background: linear-gradient(
//     180deg,
//     rgba(#efefef, 1) 0%,
//     rgba(#ededed, 1) 10%,
//     rgba(#f9f9f9, 1) 100%
// );
@mixin aa-header-gradient {
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) &,
            .#{$name} & {
                // border-right: 1px solid rgba($color-border-normal, 0.8);
                background: linear-gradient(
                    180deg,
                    #eeeeee 0%,
                    getSkinColor($skin, color-grey-medium) 10%,
                    getSkinColor($skin, color-grey-snow) 100%
                );
            }
        }
    }
}

@mixin contour04 {
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) &,
            .#{$name} & {
                border: 1px solid rgba($color-border-normal, 0.8);
            }
        }
    }
}

@mixin aa-rounded-border-colored($radius: 7px, $color: 'color-primary-normal') {
    @each $skin, $name in $skins {
        :host-context(.#{$name}) &,
        .#{$name} & {
            border-radius: $radius;
            border: 1px solid getSkinColor($skin, $color);
        }
    }
}

@mixin contour04-right {
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) &,
            .#{$name} & {
                border-right: 1px solid rgba($color-border-normal, 0.8);
            }
        }
    }
}

@mixin contour04-left {
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) &,
            .#{$name} & {
                border-left: 1px solid rgba($color-border-normal, 0.8);
            }
        }
    }
}

@mixin contour04-bottom {
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) & {
                border-bottom: 1px solid rgba($color-border-normal, 0.8);
            }
        }
    }
}

@mixin border-row-details {
    border-top: 1px solid $color-grey-snow;
    border-bottom: 1px solid $color-grey-snow;
}

@mixin border-left-light {
    border-left-width: $border-left-width;
    border-left-style: solid;
    border-top-left-radius: $border-left-radius;
    border-bottom-left-radius: $border-left-radius;
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) & {
                border-left-color: getSkinColor($skin, color-primary-light);
            }
        } @else {
            @warn "Skin #{$skin} is not defined in the config file";
        }
    }
}

@mixin border-left-highlighted {
    border-left-width: $border-left-width;
    border-left-style: solid;
    border-top-left-radius: $border-left-radius;
    border-bottom-left-radius: $border-left-radius;
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(.#{$name}) & {
                border-left-color: getSkinColor($skin, color-primary-normal);
            }
        }
    }
}

@mixin scroller {
    overflow-y: scroll;
}

// Pour la feuille de style globale
@mixin top-icon-circle($selector: '.fa-circle', $base: 'primary') {
    $icon-color: map-get(
        $map: $circle-button-colors,
        $key: $base,
    );
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            .#{$name} & {
                color: getSkinColor($skin, #{nth($icon-color, 1)});
                #{$selector} {
                    color: getSkinColor($skin, #{nth($icon-color, 2)});
                }
            }
        }
    }
}
@mixin top-action-circle($selector: '.fa-circle', $base: 'primary') {
    cursor: pointer;
    @include top-icon-circle($selector, $base);
}

@mixin icon-circle($selector: '.fa-circle', $base: 'primary') {
    $icon-color: map-get(
        $map: $circle-button-colors,
        $key: $base,
    );
    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(body.#{$name}) &,
            body.#{$name} & {
                color: getSkinColor($skin, #{nth($icon-color, 1)});
                #{$selector} {
                    color: getSkinColor($skin, #{nth($icon-color, 2)});
                }
            }
        }
    }
}
@mixin action-circle($selector: '.fa-circle', $base: 'primary') {
    cursor: pointer;
    @include icon-circle($selector, $base);
}

@mixin invert-icon-circle($selector: '.fa-circle', $base: 'primary') {
    $icon-color: map-get(
        $map: $circle-button-colors,
        $key: $base,
    );

    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(body.#{$name}) &,
            body.#{$name} & {
                color: getSkinColor($skin, #{nth($icon-color, 2)});
                #{$selector} {
                    color: getSkinColor($skin, #{nth($icon-color, 1)});
                }
            }
        }
    }
}
@mixin invert-action-circle($selector: '.fa-circle', $base: 'primary') {
    cursor: pointer;
    @include invert-icon-circle($selector, $base);
}

@mixin white-icon-circle($selector: '.fa-circle', $base: 'primary') {
    $icon-color: map-get(
        $map: $circle-button-colors,
        $key: $base,
    );

    @each $skin, $name in $skins {
        @if map-has-key($config, $skin) {
            :host-context(body.#{$name}) &,
            body.#{$name} & {
                color: getSkinColor($skin, color-white);
                #{$selector} {
                    color: getSkinColor($skin, #{nth($icon-color, 1)});
                }
            }
        }
    }
}
@mixin white-action-circle($selector: '.fa-circle', $base: 'primary') {
    cursor: pointer;
    @include white-icon-circle($selector, $base);
}

@mixin transparent-icon-circle($selector: '.fa-circle', $base: 'primary') {
    $icon-color: map-get(
        $map: $circle-button-colors,
        $key: $base,
    );

    @each $skin, $name in $skins {
        :host-context(body.#{$name}) &,
        body.#{$name} & {
            color: getSkinColor($skin, #{nth($icon-color, 1)});
            #{$selector} {
                color: transparent;
            }
        }
    }
}
@mixin transparent-action-circle($selector: '.fa-circle', $base: 'primary') {
    cursor: pointer;
    @include transparent-icon-circle($selector, $base);
}
